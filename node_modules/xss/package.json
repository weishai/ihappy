{
  "name": "xss",
  "main": "./lib/index.js",
  "version": "0.1.4",
  "description": "Sanitize untrusted HTML (to prevent XSS) with a configuration specified by a Whitelist. 根据白名单过滤HTML(防止XSS攻击)",
  "author": {
    "name": "leizongmin",
    "email": "leizongmin@gmail.com",
    "url": "http://ucdok.com"
  },
  "contributors": [
    {
      "name": "Zongmin Lei",
      "email": "leizongmin@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/leizongmin/js-xss.git"
  },
  "engines": {
    "node": ">= 0.6.0"
  },
  "devDependencies": {
    "mocha": "1.8.2",
    "blanket": "1.1.5",
    "browserify": "*",
    "uglify-js": "*"
  },
  "scripts": {
    "test": "mocha --require blanket -R html-cov > coverage.html -t 5000"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/leizongmin/js-xss/master/MIT-License"
    }
  ],
  "bugs": {
    "url": "https://github.com/leizongmin/js-xss/issues"
  },
  "homepage": "https://github.com/leizongmin/js-xss",
  "keywords": [
    "sanitization",
    "xss",
    "sanitize",
    "sanitisation",
    "input",
    "security",
    "escape",
    "encode",
    "filter",
    "validator",
    "html",
    "injection",
    "whitelist"
  ],
  "readme": "[![Build Status](https://secure.travis-ci.org/leizongmin/js-xss.png?branch=master)](http://travis-ci.org/leizongmin/js-xss)\n\n根据白名单过滤HTML(防止XSS攻击)\n======\n\n![xss](https://nodei.co/npm/xss.png?downloads=true&stars=true)\n\n**注意：0.1.x版本与0.0.x版本在自定义配置（除白名单配置外）格式上有较大改动，如果\n要使用新版本，请详细阅读下文的使用说明**\n\n\n`xss`是一个用于对用户输入的内容进行过滤，以避免遭受XSS攻击的模块\n（[什么是XSS攻击？](http://baike.baidu.com/view/2161269.htm)）。只要用于论坛、博客、网上商店等等一些可允许用户录入页面排版、\n格式控制相关的HTML的场景，`xss`模块通过白名单来控制允许的标签及相关的标签属性，\n另外还提供了一系列的接口以便用户扩展，比其他同类模块更为灵活。\n\n**项目主页：** https://github.com/leizongmin/js-xss\n\n---------------\n\n\n## 特性\n\n+ 白名单控制允许的HTML标签及各标签的属性\n+ 通过自定义处理函数，可对任意标签及其属性进行处理\n\n\n## 参考资料\n\n+ [XSS与字符编码的那些事儿 ---科普文](http://drops.wooyun.org/tips/689)\n+ [腾讯实例教程：那些年我们一起学XSS](http://www.wooyun.org/whitehats/%E5%BF%83%E4%BC%A4%E7%9A%84%E7%98%A6%E5%AD%90)\n+ [XSS Filter Evasion Cheat Sheet](https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet)\n+ [Data URI scheme](http://en.wikipedia.org/wiki/Data_URI_scheme)\n+ [XSS with Data URI Scheme](http://hi.baidu.com/badzzzz/item/bdbafe83144619c199255f7b)\n\n\n## 使用方法\n\n### 在Node.js中使用\n\n安装：\n\n```bash\n$ npm install xss\n```\n\n简单使用方法：\n\n```JavaScript\nvar xss = require('xss');\nvar html = xss('<script>alert(\"xss\");</script>');\nconsole.log(html);\n```\n\n### 在浏览器端使用\n\n```HTML\n<script src=\"https://raw.github.com/leizongmin/js-xss/master/build/xss.js\"></script>\n<script>\n// 使用函数名 filterXSS，用法一样\nvar html = filterXSS('<script>alert(\"xss\");</scr' + 'ipt>');\nalert(html);\n</script>\n```\n\n\n## 自定义过滤规则\n\n在调用 `xss()` 函数进行过滤时，可通过第二个参数来设置自定义规则：\n\n```JavaScript\noptions = {};  // 自定义规则\nhtml = xss('<script>alert(\"xss\");</script>', options);\n```\n\n如果不想每次都传入一个 `options` 参数，可以创建一个 `FilterXSS` 实例\n（使用这种方法速度更快）：\n\n```\noptions = {};  // 自定义规则\nmyxss = new xss.FilterXSS(options);\n// 以后直接调用 myxss.process() 来处理即可\nhtml = myxss.process('<script>alert(\"xss\");</script>');\n```\n\n`options` 参数的详细说明见下文。\n\n### 白名单\n\n通过 `whiteList` 来指定，格式为：`{'标签名': ['属性1', '属性2']}`。不在白名单上\n的标签将被过滤，不在白名单上的属性也会被过滤。以下是示例：\n\n```JavaScript\n// 只允许a标签，该标签只允许href, title, target这三个属性\nvar options = {\n  whiteList: {\n    a: ['href', 'title', 'target']\n  }\n};\n// 使用以上配置后，下面的HTML\n// <a href=\"#\" onclick=\"hello()\"><i>大家好</i></a>\n// 将被过滤为\n// <a href=\"#\">大家好</a>\n```\n\n默认白名单参考 `xss.whiteList`。\n\n### 自定义匹配到标签时的处理方法\n\n通过 `onTag` 来指定相应的处理函数。以下是详细说明：\n\n```JavaScript\nfunction onTag (tag, html, options) {\n  // tag是当前的标签名称，比如<a>标签，则tag的值是'a'\n  // html是该标签的HTML，比如<a>标签，则html的值是'<a>'\n  // options是一些附加的信息，具体如下：\n  //   isWhite    boolean类型，表示该标签是否在白名单上\n  //   isClosing  boolean类型，表示该标签是否为闭合标签，比如</a>时为true\n  //   position        integer类型，表示当前标签在输出的结果中的起始位置\n  //   sourcePosition  integer类型，表示当前标签在原HTML中的起始位置\n  // 如果返回一个字符串，则当前标签将被替换为该字符串\n  // 如果不返回任何值，则使用默认的处理方法：\n  //   在白名单上：  通过onTagAttr来过滤属性，详见下文\n  //   不在白名单上：通过onIgnoreTag指定，详见下文\n}\n```\n\n### 自定义匹配到标签的属性时的处理方法\n\n通过 `onTagAttr` 来指定相应的处理函数。以下是详细说明：\n\n```JavaScript\nfunction onTagAttr (tag, name, value, isWhiteAttr) {\n  // tag是当前的标签名称，比如<a>标签，则tag的值是'a'\n  // name是当前属性的名称，比如href=\"#\"，则name的值是'href'\n  // value是当前属性的值，比如href=\"#\"，则value的值是'#'\n  // isWhiteAttr是否为白名单上的属性\n  // 如果返回一个字符串，则当前属性值将被替换为该字符串\n  // 如果不返回任何值，则使用默认的处理方法\n  //   在白名单上：  调用safeAttrValue来过滤属性值，并输出该属性，详见下文\n  //   不在白名单上：通过onIgnoreTagAttr指定，详见下文\n}\n```\n\n### 自定义匹配到不在白名单上的标签时的处理方法\n\n通过 `onIgnoreTag` 来指定相应的处理函数。以下是详细说明：\n\n```JavaScript\nfunction onIgnoreTag (tag, html, options) {\n  // 参数说明与onTag相同\n  // 如果返回一个字符串，则当前标签将被替换为该字符串\n  // 如果不返回任何值，则使用默认的处理方法（通过escape指定，详见下文）\n}\n```\n\n### 自定义匹配到不在白名单上的属性时的处理方法\n\n通过 `onIgnoreTagAttr` 来指定相应的处理函数。以下是详细说明：\n\n```JavaScript\nfunction onIgnoreTagAttr (tag, name, value, isWhiteAttr) {\n  // 参数说明与onTagAttr相同\n  // 如果返回一个字符串，则当前属性值将被替换为该字符串\n  // 如果不返回任何值，则使用默认的处理方法（删除该属）\n}\n```\n\n### 自定义HTML转义函数\n\n通过 `escapeHtml` 来指定相应的处理函数。以下是默认代码 **（不建议修改）** ：\n\n```JavaScript\nfunction escapeHtml (html) {\n  return html.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n}\n```\n\n### 自定义标签属性值的转义函数\n\n通过 `safeAttrValue` 来指定相应的处理函数。以下是详细说明：\n\n```JavaScript\nfunction safeAttrValue (tag, name, value) {\n  // 参数说明与onTagAttr相同（没有options参数）\n  // 返回一个字符串表示该属性值\n}\n```\n\n### 快捷配置\n\n#### 去掉不在白名单只的标签\n\n通过 `stripIgnoreTag` 来设置：\n\n+ `true`：（默认），去掉不在白名单上的标签\n+ `false`：使用配置的`escape`函数对该标签进行转义\n\n示例：\n\n当设置 `stripIgnoreTag = true`时，以下代码\n\n```HTML\ncode:<script>alert(/xss/);</script>\n```\n\n过滤后将输出\n\n```HTML\ncode:alert(/xss/);\n```\n\n#### 去掉不在白名单上的标签及标签体\n\n通过 `stripIgnoreTagBody` 来设置：\n\n+ `false|null|undefined`：（默认），不特殊处理\n+ `'*'|true`：去掉所有不在白名单上的标签\n+ `['tag1', 'tag2']`：仅去掉指定的不在白名单上的标签\n\n示例：\n\n当设置 `stripIgnoreTagBody = ['script']`时，以下代码\n\n```HTML\ncode:<script>alert(/xss/);</script>\n```\n\n过滤后将输出\n\n```HTML\ncode:\n```\n\n\n## 应用实例\n\n### 允许标签以data-开头的属性\n\n```JavaScript\nvar source = '<div a=\"1\" b=\"2\" data-a=\"3\" data-b=\"4\">hello</div>';\nvar html = xss(source, {\n  onIgnoreTagAttr: function (tag, name, value, isWhiteAttr) {\n    if (name.substr(0, 5) === 'data-') {\n      // 通过内置的escapeAttrValue函数来对属性值进行转义\n      return name + '=\"' + xss.escapeAttrValue(value) + '\"';\n    }\n  }\n});\n\nconsole.log('%s\\nconvert to:\\n%s', source, html);\n```\n\n运行结果：\n\n```\n<div a=\"1\" b=\"2\" data-a=\"3\" data-b=\"4\">hello</div>\nconvert to:\n<div data-a=\"3\" data-b=\"4\">hello</div>\n```\n\n### 允许名称以x-开头的标签\n\n```JavaScript\nvar source = '<x><x-1>he<x-2 checked></x-2>wwww</x-1><a>';\nvar html = xss(source, {\n  onIgnoreTag: function (tag, html, options) {\n    if (tag.substr(0, 2) === 'x-') {\n      // 不对其属性列表进行过滤\n      return html;\n    }\n  }\n});\n\nconsole.log('%s\\nconvert to:\\n%s', source, html);\n```\n\n运行结果：\n\n```\n<x><x-1>he<x-2 checked></x-2>wwww</x-1><a>\nconvert to:\n&lt;x&gt;<x-1>he<x-2 checked></x-2>wwww</x-1><a>\n```\n\n### 分析HTML代码中的图片列表\n\n```JavaScript\nvar source = '<img src=\"img1\">a<img src=\"img2\">b<img src=\"img3\">c<img src=\"img4\">d';\nvar list = [];\nvar html = xss(source, {\n  onTagAttr: function (tag, name, value, isWhiteAttr) {\n    if (tag === 'img' && name === 'src') {\n      // 使用内置的friendlyAttrValue函数来对属性值进行转义，可将&lt;这类的实体标记转换成打印字符<\n      list.push(xss.friendlyAttrValue(value));\n    }\n    // 不返回任何值，表示还是按照默认的方法处理\n  }\n});\n\nconsole.log('image list:\\n%s', list.join(', '));\n```\n\n运行结果：\n\n```\nimage list:\nimg1, img2, img3, img4\n```\n\n### 去除HTML标签（只保留文本内容）\n\n```JavaScript\nvar source = '<strong>hello</strong><script>alert(/xss/);</script>end';\nvar html = xss(source, {\n  whiteList:          [],        // 白名单为空，表示过滤所有标签\n  stripIgnoreTag:     true,      // 过滤所有非白名单标签的HTML\n  stripIgnoreTagBody: ['script'] // script标签较特殊，需要过滤标签中间的内容\n});\n\nconsole.log('text: %s', html);\n```\n\n运行结果：\n\n```\ntext: helloend\n```\n\n\n## 性能（仅作参考）\n\n+ xss模块：8.2 MB/s\n+ validator@0.3.7模块的xss()函数：4.4 MB/s\n\n测试代码参考 benchmark 目录\n\n\n## 单元测试\n\n在源码目录执行命令： `npm test`\n\n\n## 在线测试\n\n在源码目录执行命令： `node lib/cli.js` ，可在命令行中输入HTML代码，并看到过滤后的代码\n\n\n## MIT协议\n\n```\nCopyright (c) 2012-2014 Zongmin Lei(雷宗民) <leizongmin@gmail.com>\nhttp://ucdok.com\n\nThe MIT License\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```",
  "readmeFilename": "README.md",
  "_id": "xss@0.1.4",
  "dist": {
    "shasum": "4f3ad80d88a6f9c135f01b580a065537e5c491f5"
  },
  "_from": "xss@",
  "_resolved": "https://registry.npmjs.org/xss/-/xss-0.1.4.tgz"
}
